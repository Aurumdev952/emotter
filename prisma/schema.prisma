// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    // provider = "postgresql"
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    relationMode = "prisma"

}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    bio           String?
    tweets Tweet[] @relation("tweet")
    likedTweets UserOnTweet[]
    comments Comment[]
    accounts      Account[]
    sessions      Session[]
    followers Follows[] @relation("follower")
    following Follows[] @relation("following")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model Tweet {
    id String @id @default(cuid()) 
    content String  
    authorId String
    likedBy UserOnTweet[]
    comments Comment[]
    images TweetImage[]
    author User @relation(name: "tweet", fields: [authorId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt


    @@index([authorId])
}

model UserOnTweet {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String // relation scalar field (used in the `@relation` attribute above)
  tweetId String // relation scalar field (used in the `@relation` attribute above)
  tweet   Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@id([userId, tweetId])
  @@index([tweetId])
  @@index([userId])
}



model Comment {
    id String @default(cuid())  @unique
    tweetId String
    authorId String
    tweet Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)
    author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
    content String
    images CommentImage[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([id, tweetId, authorId])
    @@index([tweetId])
    @@index([authorId])
}


model Follows {
  id String @id @default(cuid())
  follower    User @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User @relation("follower", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  @@unique([followerId, followingId])
  @@index([followingId])
  @@index([followerId])
}


model CommentImage {
    id String @default(cuid())
    commentId String
    comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
    publicId String
    url String
    @@id([id, commentId])
    @@index([commentId])
}
model TweetImage {
    id String @default(cuid())
    tweetId String
    tweet Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)
    publicId String
    url String
    @@id([id, tweetId])
    @@index([tweetId])
}